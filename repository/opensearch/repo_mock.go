// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo.go
//
// Generated by this command:
//
//	mockgen -source=./repo.go -destination=./repo_mock.go -package=opensearch
//
// Package opensearch is a generated GoMock package.
package opensearch

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenSearchClient is a mock of OpenSearchClient interface.
type MockOpenSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSearchClientMockRecorder
}

// MockOpenSearchClientMockRecorder is the mock recorder for MockOpenSearchClient.
type MockOpenSearchClientMockRecorder struct {
	mock *MockOpenSearchClient
}

// NewMockOpenSearchClient creates a new mock instance.
func NewMockOpenSearchClient(ctrl *gomock.Controller) *MockOpenSearchClient {
	mock := &MockOpenSearchClient{ctrl: ctrl}
	mock.recorder = &MockOpenSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenSearchClient) EXPECT() *MockOpenSearchClientMockRecorder {
	return m.recorder
}

// Perform mocks base method.
func (m *MockOpenSearchClient) Perform(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perform", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Perform indicates an expected call of Perform.
func (mr *MockOpenSearchClientMockRecorder) Perform(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perform", reflect.TypeOf((*MockOpenSearchClient)(nil).Perform), arg0)
}
