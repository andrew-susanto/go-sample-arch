// Code generated by MockGen. DO NOT EDIT.
// Source: ./resource_db.go

// Package user is a generated GoMock package.
package user

import (
	gomock "github.com/golang/mock/gomock"
	pgsqlx "github.com/joez-tkpd/go-sample-arch/repository/pgsqlx"
	reflect "reflect"
)

// MockDBRepository is a mock of DBRepository interface
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method
func (m *MockDBRepository) GetUserByID(id int64) pgsqlx.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(pgsqlx.User)
	return ret0
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockDBRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDBRepository)(nil).GetUserByID), id)
}
