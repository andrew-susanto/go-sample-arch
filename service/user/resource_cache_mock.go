// Code generated by MockGen. DO NOT EDIT.
// Source: ./resource_cache.go

// Package user is a generated GoMock package.
package user

import (
	gomock "github.com/golang/mock/gomock"
	redispool "github.com/joez-tkpd/go-sample-arch/repository/redispool"
	reflect "reflect"
)

// MockCacheRepository is a mock of CacheRepository interface
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// SetUser mocks base method
func (m *MockCacheRepository) SetUser(user redispool.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", user)
}

// SetUser indicates an expected call of SetUser
func (mr *MockCacheRepositoryMockRecorder) SetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockCacheRepository)(nil).SetUser), user)
}

// GetUserByID mocks base method
func (m *MockCacheRepository) GetUserByID(id int64) redispool.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(redispool.User)
	return ret0
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockCacheRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockCacheRepository)(nil).GetUserByID), id)
}
