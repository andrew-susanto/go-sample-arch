// Code generated by MockGen. DO NOT EDIT.
// Source: ./resource.go
//
// Generated by this command:
//
//	mockgen -source=./resource.go -destination=./resource_mock.go -package=user
//
// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	cache "github.com/andrew-susanto/go-sample-arch/repository/cache"
	psql "github.com/andrew-susanto/go-sample-arch/repository/psql"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockCacheRepository) GetUserByID(ctx context.Context, ID int64) (cache.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(cache.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockCacheRepositoryMockRecorder) GetUserByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockCacheRepository)(nil).GetUserByID), ctx, ID)
}

// MockDBRepository is a mock of DBRepository interface.
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository.
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance.
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockDBRepository) GetUserByID(ctx context.Context, ID int64) (psql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(psql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDBRepositoryMockRecorder) GetUserByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDBRepository)(nil).GetUserByID), ctx, ID)
}
