// Code generated by MockGen. DO NOT EDIT.
// Source: paramstore.go
//
// Generated by this command:
//
//	mockgen -source=paramstore.go -destination=paramstore_mock.go -package=paramstore
//
// Package paramstore is a generated GoMock package.
package paramstore

import (
	context "context"
	reflect "reflect"

	ssm "github.com/aws/aws-sdk-go-v2/service/ssm"
	gomock "go.uber.org/mock/gomock"
)

// MockParamStoreClientInterface is a mock of ParamStoreClientInterface interface.
type MockParamStoreClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockParamStoreClientInterfaceMockRecorder
}

// MockParamStoreClientInterfaceMockRecorder is the mock recorder for MockParamStoreClientInterface.
type MockParamStoreClientInterfaceMockRecorder struct {
	mock *MockParamStoreClientInterface
}

// NewMockParamStoreClientInterface creates a new mock instance.
func NewMockParamStoreClientInterface(ctrl *gomock.Controller) *MockParamStoreClientInterface {
	mock := &MockParamStoreClientInterface{ctrl: ctrl}
	mock.recorder = &MockParamStoreClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamStoreClientInterface) EXPECT() *MockParamStoreClientInterfaceMockRecorder {
	return m.recorder
}

// GetParameter mocks base method.
func (m *MockParamStoreClientInterface) GetParameter(ctx context.Context, params *ssm.GetParameterInput, optFns ...func(*ssm.Options)) (*ssm.GetParameterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParameter", varargs...)
	ret0, _ := ret[0].(*ssm.GetParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameter indicates an expected call of GetParameter.
func (mr *MockParamStoreClientInterfaceMockRecorder) GetParameter(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameter", reflect.TypeOf((*MockParamStoreClientInterface)(nil).GetParameter), varargs...)
}
