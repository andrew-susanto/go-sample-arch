// Code generated by MockGen. DO NOT EDIT.
// Source: rpcclient.go
//
// Generated by this command:
//
//	mockgen -source=rpcclient.go -destination=rpcclient_mock.go -package=rpcclient
//
// Package rpcclient is a generated GoMock package.
package rpcclient

import (
	context "context"
	reflect "reflect"

	jsonrpc "github.com/ybbus/jsonrpc/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockjsonRpcClient is a mock of jsonRpcClient interface.
type MockjsonRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockjsonRpcClientMockRecorder
}

// MockjsonRpcClientMockRecorder is the mock recorder for MockjsonRpcClient.
type MockjsonRpcClientMockRecorder struct {
	mock *MockjsonRpcClient
}

// NewMockjsonRpcClient creates a new mock instance.
func NewMockjsonRpcClient(ctrl *gomock.Controller) *MockjsonRpcClient {
	mock := &MockjsonRpcClient{ctrl: ctrl}
	mock.recorder = &MockjsonRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjsonRpcClient) EXPECT() *MockjsonRpcClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockjsonRpcClient) Call(ctx context.Context, method string, params ...any) (*jsonrpc.RPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, method}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*jsonrpc.RPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockjsonRpcClientMockRecorder) Call(ctx, method any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, method}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockjsonRpcClient)(nil).Call), varargs...)
}
